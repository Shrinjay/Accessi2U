generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Adjacency {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  node_id    Int?
  edge_id    Int?
  edge       Edge?     @relation(fields: [edge_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  node       Node?     @relation(fields: [node_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([node_id, edge_id], map: "uix_adjacency_node_edge")
  @@index([id], map: "ix_adjacency_id")
  @@map("adjacency")
}

model Building {
  id                  Int              @id @default(autoincrement())
  created_at          DateTime?        @db.Timestamp(6)
  updated_at          DateTime?        @db.Timestamp(6)
  name                String           @db.VarChar(255)

  centroid_lat        Float
  centroid_lon         Float
  area               Float

  rendering_entity_id Int?
  renderingentity     RenderingEntity? @relation(fields: [rendering_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  edge                Edge[]
  node                Node[]
  floors             Floor[]

  @@index([id], map: "ix_building_id")
  @@map("building")
}

model Edge {
  id          Int         @id @default(autoincrement())
  created_at  DateTime?   @db.Timestamp(6)
  updated_at  DateTime?   @db.Timestamp(6)

  edge_type   EdgeTypeEnum?

  building_id Int?
  floor_id    Int?
  to_floor_id Int?
  room_id     Int?
  adjacency   Adjacency[]

  building    Building?   @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  floor       Floor?      @relation("EdgeFloor", fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  to_floor    Floor?      @relation("EdgeToFloor", fields: [to_floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room        Room?       @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([room_id, building_id, floor_id], map: "uix_edge_room_building_floor")
  @@index([id], map: "ix_edge_id")
  @@map("edge")
}

model File {
  id              Int               @id @default(autoincrement())
  created_at      DateTime?         @db.Timestamp(6)
  updated_at      DateTime?         @db.Timestamp(6)
  external_id     String            @db.VarChar
  file_system     FileSystemEnum?
  renderingentity RenderingEntity[]

  @@map("file")
}

model Floor {
  id                  Int              @id @default(autoincrement())
  level               Int              
  created_at          DateTime?        @db.Timestamp(6)
  updated_at          DateTime?        @db.Timestamp(6)
  name                String           @db.VarChar(255)
  area               Float
  rendering_entity_id Int?
  building_id        Int?
  edge                Edge[] @relation("EdgeFloor")
  edges_from_other_floors Edge[] @relation("EdgeToFloor")
  building            Building?       @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  renderingentity     RenderingEntity? @relation(fields: [rendering_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  node                Node[]
  rooms              Room[]

  @@index([id], map: "ix_floor_id")
  @@map("floor")
}

model Node {
  id          Int           @id @default(autoincrement())
  created_at  DateTime?     @db.Timestamp(6)
  updated_at  DateTime?     @db.Timestamp(6)
  node_type   NodeTypeEnum?
  room_id     Int?
  building_id Int?
  floor_id    Int?
  adjacency   Adjacency[]
  building    Building?     @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  floor       Floor?        @relation(fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room        Room?         @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([room_id, building_id, floor_id], map: "uix_node_room_building_floor")
  @@index([id], map: "ix_node_id")
  @@map("node")
}

model RenderingEntity {
  id                    Int               @id @default(autoincrement())
  created_at            DateTime?         @db.Timestamp(6)
  updated_at            DateTime?         @db.Timestamp(6)
  file_id               Int?
  parent_id             Int?
  building              Building[]
  floor                 Floor[]
  file                  File?             @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  renderingentity       RenderingEntity?  @relation("renderingentityTorenderingentity", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_renderingentity RenderingEntity[] @relation("renderingentityTorenderingentity")
  room                  Room[]

  @@index([id], map: "ix_renderingentity_id")
  @@map("renderingentity")
}

model Room {
  id                  Int              @id @default(autoincrement())
  created_at          DateTime?        @db.Timestamp(6)
  updated_at          DateTime?        @db.Timestamp(6)
  name                String           @db.VarChar(255)
  rendering_entity_id Int?
  floor_id            Int?

  centroid_lat        Float
  centroid_lon         Float
  area               Float

  edge                Edge[]
  node                Node[]
  renderingentity     RenderingEntity? @relation(fields: [rendering_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  floor              Floor?            @relation(fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomType            String?
  reports             Report[]

  @@index([id], map: "ix_room_id")
  @@map("room")
}

model Report {
  id          Int       @id @default(autoincrement())
  created_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  room        Room?     @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room_id     Int

  reportType ReportTypeEnum
  comment String?

  @@map("report")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

enum FileSystemEnum {
  LOCAL
  MINIO

  @@map("filesystemenum")
}

enum NodeTypeEnum {
  ROOM
  CONNECTION_POINT
  STAIR
  ELEVATOR

  @@map("nodetypeenum")
}

enum ReportTypeEnum {
  // TODO add all the report types
  ELEVATOR_OUT_OF_SERVICE
  BATHROOM_NOT_ACCESSIBLE
  MISLABELED
  OTHER
  @@map("reporttypeenum")
}

enum EdgeTypeEnum {
  REGULAR
  INTER_FLOOR

  @@map("edgetypeenum")
}
